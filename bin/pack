#! /usr/bin/env perl

=head1 NAME

pack - Utility to create sprite sheets

=head1 SYNOPSIS

pack sheet *.png *.jpg 

=head1 INSTALLATION

One of the following will work to get dependencies:

=over 4

=item apt-get

sudo apt-get install perlmagick

=item CPAN

cpan Image::Magic

=back

=head1 AUTHOR

Bruce Armstrong <bruce@fortressofgeekdom.org>

=cut

use strict;
use warnings;
use Image::Magick;
use JSON::Any;
use File::Slurp;
use File::Basename;
use List::Util 'max';

sub pack_sheet {
    my $sheet  = shift @ARGV;
    my @images = sort {
        my $as = $a->{sourceSize};
        my $bs = $b->{sourceSize};
        ( $bs->{h} > $bs->{w} ? $bs->{h} : $bs->{w} )
          <=>
		( $as->{h} > $as->{w} ? $as->{h} : $as->{w} )
    } read_images();
    my $size;
    for my $i (@images) {
        $size += $i->{sourceSize}{h} * $i->{sourceSize}{w};
    }

    my $width = 16;
    while ( $width**2 < $size ) {
        $width *= 2;
    }

    while (1) {
        eval { pack_images( $width, \@images ); };
        last unless $@;
        $width *= 2;
    }

    write_sheet( $sheet, $width, \@images );
}

sub read_images {
    my @images;
    for my $file (@ARGV) {
        eval {
            my $image = Image::Magick->new;
            $image->Read($file);
            push @images,
              { filename         => $file,
                rotated          => 'false',
                trimmed          => 'false',
                spriteSourceSize => {
                    x => 0,
                    y => 0,
                    w => $image->Get('width'),
                    h => $image->Get('height'),
                },
                sourceSize =>
                  { w => $image->Get('width'), h => $image->Get('height'), },
                image => $image,
              };
        };
        print "Error: $@\n" if $@;
    }
    return @images;
}

sub pack_images {
    my ( $width, $images ) = @_;
    my @space = [ { h => $width, w => $width, full => 0, x => 0, y => 0 } ];
	my @display;
    for my $i (@$images) {
        for my $y (0 .. $#space) {
			for my $x (0 .. $#{ $space[$y] }) {
				goto FOUND if place($i, $x, $y, \@space);
			}
		}
		die "Can't place image\n";
		FOUND:
		push @display, $i;
		#display($width, \@space, \@display);
    }
}

sub display {
	my ($width, $space, $images) = @_;

	my $image = Image::Magick->new( size => $width . 'x' . $width );
    $image->Read('NULL:black');
	$image->Set(fill=>'black');
	for my $row (@$space) {
		for my $s (@$row) {
		$image->Draw(primitive=>'rectangle', stroke=>'red', fill=>($s->{full}?'black':'gray'),points=>$s->{x}.','.$s->{y}.' '.($s->{x}+ $s->{w}).','.($s->{y}+$s->{h}));
		}
	}
	for my $i (@$images) {
		$image->Composite(image=>$i->{image}, x=>$i->{frame}{x}, y=>$i->{frame}{y});
	}
	$image->Write('tmp.png');
	print "Wrote image...";
	my $x = <STDIN>;
} 

sub place {
	my ($image, $x, $y, $space) = @_;
	my ($dx, $dy) = ($x, $y);
	my ($w, $h) = ($image->{sourceSize}{w}, $image->{sourceSize}{h});
	my ($aw, $ah) = (0, 0);

	#Check to see if cells are used
	while (1) {
		return if $dx > $#$space;
		my $cell = $space->[$dx][$y];
		return if $cell->{full};
		$aw += $cell->{w};
		last if $aw >= $w;
		$dx++;
	}
	while (1) {
		return if $dy > $#{$space->[$x]};
		my $cell = $space->[$x][$dy];
		return if $cell->{full};
		$ah += $cell->{h};
		last if $ah >= $h;
		$dy++;
	}

	#Split cells if image doesn't fill space
	if ( $ah > $h ) {
		my $diff = $ah - $h;
		for my $row (@$space) {
			my $c = $row->[$dy];
			$c->{h} -= $diff;
			splice(
				@$row, $dy + 1, 0,
				{   w    => $c->{w},
					h    => $diff,
					full => $c->{full},
					x    => $c->{x},
					y    => $c->{y} + $c->{h}} );
		}
	}

	if ( $aw > $w ) {
		my $diff = $aw - $w;
		my $row  = $space->[$dx];
		my @new_row;
		for my $c (@$row) {
			$c->{w} = $c->{w} - $diff;
			push @new_row,
			  { w    => $diff,
				h    => $c->{h},
				full => $c->{full},
				x    => $c->{x} + $c->{w},
				y    => $c->{y}};
		}
		splice( @$space, $dx + 1, 0, \@new_row );
	}

	#Mark space as used
	my $cell = $space->[$x][$y];
	$image->{frame} = { x => $cell->{x}, y => $cell->{y}, w => $w, h => $h };
	for my $row_id ( $x .. $dx ) {
		my $row = $space->[$row_id];
		for my $col_id ( $y .. $dy ) {
			my $cell = $row->[$col_id];
			$cell->{full} = 1;
		}
	}

	return 1;
}

sub write_sheet {
    my ( $file, $width, $images ) = @_;

    my (%frames);
    my ( $max_x, $max_y ) = ( 0, 0 );
    my $image = Image::Magick->new( size => $width . 'x' . $width );
    $image->Read('NULL:black');
    for my $i (@$images) {
        my $mask = delete $i->{image};
        my ($base) = fileparse( delete $i->{filename}, qr/\.[^.]*/ );
        $image->Composite(
            image => $mask,
            x     => $i->{frame}{x},
            y     => $i->{frame}{y} );
        $frames{$base} = $i;
        $max_x = max( $max_x, $i->{frame}{x} + $i->{frame}{w} );
        $max_y = max( $max_y, $i->{frame}{y} + $i->{frame}{h} );
    }
    $image->Crop( width => next_square($max_x), height => next_square($max_y) );
    $image->Write("$file.png");
    write_file( "$file.json", JSON::Any->objToJson( { frames => \%frames } ) );
}

sub next_square {
	my $i = shift;
	my $s = 2;
	while ($s < $i) {
		$s *= 2;
	}
	return $s;
}

pack_sheet();
