#! /usr/bin/env perl

=head1 NAME

pack - Utility to create sprite sheets

=head1 SYNOPSIS

pack sheet *.png *.jpg 

=head1 INSTALLATION

One of the following will work to get dependencies:

=over 4

=item apt-get

sudo apt-get install perlmagick

=item CPAN

cpan Image::Magic

=back

=head1 AUTHOR

Bruce Armstrong bruce@fortressofgeekdom.org

=cut

use strict;
use warnings;
use Image::Magick;
use Data::Dumper;

sub pack_sheet {
	my $sheet = shift @ARGV;
    my @images = sort { $a->{h} <=> $b->{h} } read_images();
    my $size;
    for my $i (@images) {
        $size += $i->{h} * $i->{w};
    }

    my $width = 16;
    while ( $width**2 < $size ) {
        $width *= 2;
    }

    while (1) {
        eval {
            pack_images( $width, \@images );
            last;
        };
        $width *= 2;
    }
	print Dumper [$width, \@images];
}

sub read_images {
    my @images;
    for my $file (@ARGV) {
        eval {
            my $image = Image::Magick->new;
            $image->Read($file);
            push @images,
              { filename         => $file,
                rotated          => 'false',
                trimmed          => 'false',
                spriteSourceSize => {
                    x => 0,
                    y => 0,
                    w => $image->Get('width'),
                    h => $image->Get('height'),
                },
                sourceSize =>
                  { w => $image->Get('width'), h => $image->Get('height'), },
                #image => $image,
              };
        };
        print "Error: $@\n" if $@;
    }
    return @images;
}

sub pack_images {
    my ( $width, $images ) = @_;
    my @space = [ { h => $width, w => $width, full => 0, x => 0, y => 0 } ];
    for my $i (@$images) {
        for my $y (0 .. $#space) {
			for my $x (0 .. $#{ $space[$y] }) {
				goto FOUND if place($i, $x, $y, \@space);
			}
		}
		die "Can't place image\n";
		FOUND:
    }
}

sub place {
	my ($image, $x, $y, $space) = @_;
	my ($dx, $dy) = ($x, $y);
	my ($w, $h) = $image->{sourceSize}{w}, $image->{sourceSize}{h};
	my ($aw, $ah) = 0, 0;

	#Check to see if cells are used
	while ($aw < $w) {
		my $cell = $space->[$dx][$dy++];
		return () if $cell->{full};
		$w += $cell->{w};
	}
	while ($ah < $h) {
		my $cell = $space->[$dx++][$dy];
		return () if $cell->{full};
		$w += $cell->{h};
	}

	#Space is available, mark used
	my $cell = $space->[$x][$y];
	$image->{frame} = { x => $cell->{x}, y => $cell->{y}, w => $w, h => $h };
	for my $row_id ( $y .. --$dy ) {
		my $row = $space->[$row_id];
		for my $col_id ( $x .. --$dx ) {
			my $cell = $row->[$col_id];
			$cell->{full} = 1;
		}
	}

	#Split cells if image doesn't fill space
	if ( $aw > $w ) {
		my $diff = $aw - $w;
		for my $row (@$space) {
			my $c = $row->{$dx};
			$c->{w} -= $diff;
			splice(
				@$row, $dx + 1, 0,
				{   w    => $diff,
					h    => $c->{h},
					full => 0,
					x    => $c->{x} + $c->{w},
					y    => $c->{y} } );
		}
	}

	if ( $ah > $h ) {
		my $diff = $ah - $h;
		my $row  = $space->{$dy};
		my @new_row;
		for my $c (@$row) {
			$row->{h}    = $row->{h} - $diff;
			$row->{full} = 0;
			push @new_row,
			  { w    => $c->{w},
				h    => $diff,
				full => 0,
				x    => $c->{x},
				y    => $c->{y} + $c->{h} };
		}
		splice( @$space, $dy + 1, 0, \@new_row );
	}
}

pack_sheet();
