#! /usr/bin/perl

use strict;
use warnings;
use FindBin;
use lib "$FindBin::Bin";
use bot 'Rook';
use Card;
use Data::Dumper;

my %status;
our $| = 1;
on join => sub {
    my $msg = shift;
    if ( $status{id} ) {
        $status{players}{ $msg->{player}{id} } = $msg->{player};
    }
    else {
        $status{id} = -1;
        cmd 'status';
    }
};

my %state_action = (
    WaitingForPlayers => sub { },
    Dealing           => sub {
        if ( $status{state} eq 'Dealing' && $status{public}{dealer} eq $status{id} ) {
            cmd 'deal';
        }
    },
    Bidding    => \&make_bid,
    Declaring  => \&declare,
    PlayTricks => \&play_card,
);

on status => sub {
    my $msg = shift;
    %status = %{$msg};
    $status{private}{cards} = cards( $status{private}{cards} ) if defined $status{private}{cards};
    my $f = $state_action{ $msg->{state} } || sub { print Dumper $msg };
    $f->();
};

sub make_bid {
    return unless $status{public}{bidder} eq $status{id};
    $status{public}{bid} ||= 95;
    if ( $status{public}{bid} < 145 ) {
        cmd bid => $status{public}{bid} + 5;
    }
    else {
        cmd bid => 'pass';
    }
}

on bidding => sub {
    my $msg = shift;
    $status{state} = 'Bidding';
    $status{public}{bidder} = $msg->{bidder};
    make_bid();
};

on bid => sub {
    my $msg = shift;
    $status{public}{bidder} = $msg->{bidder};
    $status{public}{player} = $msg->{bidder};
    if ( $msg->{bid} ne 'pass' ) {
        $status{public}{bid} = $msg->{bid};
    }
    make_bid();
};

on dealing => sub {
    my $msg = shift;
    $status{state} = 'Dealing';
    if ( $msg->{dealer} eq $status{id} ) {
        cmd 'deal';
    }
};

on deal => sub {
    my $msg = shift;
    $status{private}{cards} = cards( $msg->{cards} );
    $status{public}{bid} = 95;
};

sub declare {
    my %suit;
    for my $c ( @{ $status{private}{cards} } ) {
        my $s = $c->s('_');
        next if $s eq '_';
        $suit{$s}{s} = $s;
        $suit{$s}{count}++;
        $suit{$s}{str} += $c->o;
    }
    my @suit = values %suit;
    @suit = sort { $b->{count} <=> $a->{count} or $b->{str} <=> $a->{str} } @suit;
    for my $i ( 0 .. $#suit ) { $suit[$i]{i} = $i }
    my $s = $suit[0]{s};
    $status{private}{cards} =
      [ sort { $suit{ $a->s($s) }{i} <=> $suit{ $b->s($s) }{i} || $b->o <=> $a->o } @{ $status{private}{cards} } ];
    my @nest = splice @{ $status{private}{cards} }, 10, 5;
    cmd declare => { trump => $suit[0]{s}, nest => \@nest };
    $status{public}{trick} = [];
    play_card();
}

on nest => sub {
    my $msg = shift;
    $status{state} = 'Declaring';
    push @{ $status{private}{cards} }, @{ cards( $msg->{nest} ) };
    declare();
};

on trump => sub {
    my $msg = shift;
    $status{public}{trump} = $msg->{trump};
};

on play => sub {
    my $msg = shift;
    $status{public}{player} = $msg->{next};
	push @{ $status{public}{trick} }, Card->new($msg->{card});
    play_card();
};

sub play_card {
    return unless $status{public}{player} eq $status{id};

    my %hand = ( R => [], G => [], B => [], Y => [] );
    for my $c ( @{ $status{private}{cards} } ) {
        push @{ $hand{ $c->s( $status{public}{trump} ) } }, $c;
    }

    if ( @{ $status{public}{trick} } && @{ $hand{ $status{public}{trick}[0]->s($status{public}{trump}) } } ) {
        my $lead = $hand{ $status{public}{trick}[0]->s($status{public}{trump}) };
        my $card = $lead->[ int( rand(@$lead) ) ];
        cmd play => { card => $card };
        for my $i ( 0 .. $#{ $status{private}{cards} } ) {
            splice( @{ $status{private}{cards} }, $i, 1 ) && last if $status{private}{cards}[$i] eq $card;
        }
    }
    else {
        my $card = splice( @{ $status{private}{cards} }, int( rand( @{ $status{private}{cards} } ) ), 1 );
        cmd play => { card => $card };
    }
}

sub cards {
    [ map { Card->new($_) } @{ $_[0] } ];
}

on trick => sub {
	my $msg = shift;
	$status{public}{player} = $msg->{winner};
	$status{public}{trick} = [];
	play_card() if @{ $status{private}{cards} };
};

on final => sub {
	cmd 'quit';
	exit;
};

on quit => sub {
	cmd 'quit';
	exit;
};

play;
